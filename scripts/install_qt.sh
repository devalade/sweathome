#!/bin/bash

# --- Configuration Variables ---
PROJECT_NAME="MyFirstQtApp"
PROJECT_DIR="$HOME/$PROJECT_NAME"
BUILD_DIR="$PROJECT_DIR/build"
# --- End Configuration Variables ---

echo "--- Starting Comprehensive Qt Project Setup and Build Script ---"
echo "This script will install necessary packages, create your first Qt project, build it, and run it."
echo "------------------------------------------------------------------"

# Exit immediately if a command exits with a non-zero status.
set -e

# --- 1. Update package lists and install core build dependencies ---
echo "1. Updating package lists and installing core build dependencies..."
sudo apt update
sudo apt install -y build-essential cmake git gdb

echo "Core build dependencies installed."
echo "------------------------------------------------------------------"

# --- 2. Install Qt5 development packages ---
echo "2. Installing Qt5 development packages..."
# Removed 'qt5-default' as it's deprecated/unavailable on newer systems.
# Explicitly installing necessary Qt5 development packages.
# qtbase5-dev: Essential development headers and libraries for Qt5 core modules (Widgets, GUI, Core).
# qtchooser: Manages multiple Qt versions, ensures 'qmake' points correctly.
# qttools5-dev: Provides development tools like Qt Designer, linguist, etc.
# qttools5-dev-tools: Provides 'uic' (UI Compiler) and 'moc' (Meta-Object Compiler) executables.
# libqt5charts5-dev: (Optional) If you need Qt Charts module. Remove if not needed.
sudo apt install -y qtbase5-dev qtchooser qttools5-dev qttools5-dev-tools

echo "Qt5 development packages installed."
echo "------------------------------------------------------------------"

# --- 3. Create Project Directory and Files ---
echo "3. Creating project directory and source files..."

# Create the main project directory
mkdir -p "$PROJECT_DIR"
cd "$PROJECT_DIR"

# Create CMakeLists.txt
cat <<EOF >CMakeLists.txt
# Minimum version of CMake required
cmake_minimum_required(VERSION 3.16 FATAL_ERROR)

# Project name
project(${PROJECT_NAME} LANGUAGES CXX)

# Find Qt5 (using Qt5 since we installed qtbase5-dev)
find_package(Qt5 COMPONENTS Widgets REQUIRED)

# Set up automatic MOC, UIC, and RCC processing
# MOC: Meta-Object Compiler (for signals/slots)
# UIC: User Interface Compiler (for .ui files)
# RCC: Resource Compiler (for .qrc files)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOMOC ON)

# Ensure include directories are set for Qt
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Add the executable target
# List all your source files (.cpp, .h, .ui) here
add_executable(${PROJECT_NAME}
    main.cpp
    mainwindow.h
    mainwindow.cpp
    mainwindow.ui # Qt Designer UI file
)

# Link the Qt libraries to your executable
target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Widgets)

# Optional: Set output directory for binaries
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
EOF
echo "Created CMakeLists.txt"

# Create main.cpp
cat <<EOF >main.cpp
#include <QApplication> // Required for all Qt GUI applications
#include "mainwindow.h" // Include your main window header

int main(int argc, char *argv[])
{
    // Create a QApplication object. This object manages the application's
    // graphical user interface and its main event loop.
    QApplication a(argc, argv);

    // Create an instance of your MainWindow class.
    MainWindow w;

    // Show the main window.
    w.show();

    // Start the application's event loop. This makes the application
    // responsive to user input and system events.
    return a.exec();
}
EOF
echo "Created main.cpp"

# Create mainwindow.h
cat <<EOF >mainwindow.h
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow> // Base class for main application windows
#include <QPushButton> // Include QPushButton for explicit declaration if needed

// Forward declaration of the Ui namespace, generated from mainwindow.ui
QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

// Declare the MainWindow class, inheriting from QMainWindow
class MainWindow : public QMainWindow
{
    // Q_OBJECT macro is essential for Qt's meta-object system,
    // enabling features like signals and slots, dynamic property system, etc.
    Q_OBJECT

public:
    // Constructor: Takes a QWidget parent, defaulting to nullptr
    explicit MainWindow(QWidget *parent = nullptr);

    // Destructor: Cleans up resources
    ~~MainWindow();

private slots:
    // Declaration of a slot (a function that can be called by a signal)
    // This slot will be connected to the button's clicked signal.
    void on_pushButton_clicked();

private:
    // Pointer to the UI object generated by Qt Designer (from mainwindow.ui)
    Ui::MainWindow *ui;
};

#endif // MAINWINDOW_H
EOF
echo "Created mainwindow.h"

# Create mainwindow.cpp
cat <<EOF >mainwindow.cpp
#include "mainwindow.h"
#include "./ui_mainwindow.h" // Automatically generated header from mainwindow.ui
#include <QMessageBox>      // For displaying a simple message box
#include <QLabel>           // For QLabel
#include <QPushButton>      // For QPushButton

// Constructor for MainWindow
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent) // Call the base class constructor
    , ui(new Ui::MainWindow) // Initialize the ui pointer
{
    // Set up the user interface defined in mainwindow.ui
    ui->setupUi(this);

    // Connect the clicked signal of the pushButton (named "pushButton" in Qt Designer)
    // to the on_pushButton_clicked slot.
    // Qt's auto-connection feature (based on naming convention) would also connect this,
    // but explicit connection is good practice.
    connect(ui->pushButton, &QPushButton::clicked, this, &MainWindow::on_pushButton_clicked);

    // Set an initial text for the label
    ui->label->setText("Click the button!");
}

// Destructor for MainWindow
MainWindow::~MainWindow()
{
    // Delete the UI object to free memory
    delete ui;
}

// Implementation of the slot connected to the button's clicked signal
void MainWindow::on_pushButton_clicked()
{
    // Update the text of the label
    ui->label->setText("Button was clicked!");

    // Display a simple message box
    QMessageBox::information(this, "Qt Project", "Hello from your first Qt app!");
}
EOF
echo "Created mainwindow.cpp"

# Create mainwindow.ui
cat <<EOF >mainwindow.ui
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>MainWindow</class>
 <widget class="QMainWindow" name="MainWindow">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>400</width>
    <height>200</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>My First Qt App</string>
  </property>
  <widget class="QWidget" name="centralwidget">
   <layout class="QVBoxLayout" name="verticalLayout">
    <item>
     <widget class="QLabel" name="label">
      <property name="text">
       <string>Hello, Qt World!</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignCenter</set>
      </property>
     </widget>
    </item>
    <item>
     <widget class="QPushButton" name="pushButton">
      <property name="text">
       <string>Click Me</string>
      </property>
     </widget>
    </item>
   </layout>
  </widget>
  <widget class="QMenuBar" name="menubar">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
     <width>400</width>
     <height>22</height>
    </rect>
   </property>
  </widget>
  <widget class="QStatusBar" name="statusbar"/>
 </widget>
 <resources/>
 <connections/>
</ui>
EOF
echo "Created mainwindow.ui"

echo "All project files created in $PROJECT_DIR."
echo "------------------------------------------------------------------"

# --- 4. Build the Project ---
echo "4. Building the project using CMake and Make..."

mkdir -p "$BUILD_DIR"
cd "$BUILD_DIR"

echo "Running CMake configuration..."
cmake ..

echo "Compiling the project..."
# Use all available CPU cores for faster compilation
make -j$(nproc)

echo "Project build complete."
echo "------------------------------------------------------------------"

# --- 5. Run the Project ---
echo "5. Running the compiled application..."

# The executable will be in the 'bin' subdirectory within the build directory
if [ -f "./bin/$PROJECT_NAME" ]; then
  ./bin/"$PROJECT_NAME"
  echo "Application finished."
else
  echo "Error: Executable not found at ./bin/$PROJECT_NAME. Build might have failed."
fi

echo "------------------------------------------------------------------"
echo "--- Script Finished ---"
echo "Your Qt development environment is set up, and your first project was built and run."
echo ""
echo "You can now open this project in Qt Creator:"
echo "1. Launch Qt Creator."
echo "2. Go to 'File > Open File or Project...'."
echo "3. Navigate to '$PROJECT_DIR' and select 'CMakeLists.txt'."
echo "4. Select the appropriate Kit (e.g., 'Desktop Qt5 GCC 64bit') and ensure 'CMake' is chosen as the build system."
echo "5. Click 'Configure Project' and then the green 'Run' button."
echo ""
echo "Happy Qt coding!"
