#!/bin/bash

# =================================================================
#          Ubuntu Server Initial Security Hardening Script
# =================================================================
#
# This script performs initial security hardening tasks on a fresh
# Ubuntu system.
#
# WHAT IT DOES:
# 1. Updates all system packages.
# 2. Prompts to create a new user with sudo privileges.
# 3. Disables root SSH login to enhance security.
# 4. Configures UFW (Uncomplicated Firewall) to allow only SSH,
#    HTTP, and HTTPS traffic.
# 5. Installs and configures Fail2ban to protect against brute-force
#    attacks on the SSH service.
#
# USAGE:
# 1. Download this script to your server:
#    wget [URL_to_this_script] -O harden.sh
# 2. Make it executable:
#    chmod +x harden.sh
# 3. Run it with sudo:
#    sudo ./harden.sh
#
# =================================================================

# --- Script Functions ---

# Function to print a section header
print_header() {
    echo ""
    echo "============================================================"
    echo "  $1"
    echo "============================================================"
}

# --- Main Script ---

# 1. Check if the script is run as root
if [[ "${EUID}" -ne 0 ]]; then
    echo "Error: This script must be run as root."
    echo "Please run with 'sudo'."
    exit 1
fi

# --- Step 1: System Update ---
print_header "Updating System Packages"
echo "This will update the package lists and upgrade all installed packages."
apt-get update && apt-get upgrade -y
apt-get autoremove -y
apt-get autoclean -y
echo "System update complete."

# --- Step 2: Create a New Sudo User ---
print_header "Creating a New User with Sudo Privileges"
read -p "Enter the username for the new user: " NEW_USER
if [ -z "$NEW_USER" ]; then
    echo "No username entered. Aborting."
    exit 1
fi

if id "$NEW_USER" &>/dev/null; then
    echo "User '$NEW_USER' already exists. Skipping user creation."
else
    # Create the user
    useradd -m -s /bin/bash "$NEW_USER"
    echo "User '$NEW_USER' created."

    # Set the password for the new user
    echo "Please set a password for $NEW_USER."
    passwd "$NEW_USER"

    # Add the user to the sudo group
    usermod -aG sudo "$NEW_USER"
    echo "User '$NEW_USER' has been granted sudo privileges."
    echo "IMPORTANT: Please log out and log back in as '$NEW_USER' to continue."
    echo "           You will need to use SSH keys for the new user."
fi

# --- Step 3: Secure SSH ---
print_header "Securing SSH Configuration"
echo "Disabling root login and password authentication."
# Create a backup of the original sshd_config file
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak

# Disable root login
sed -i 's/PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
# A more robust way to ensure the line is set correctly
grep -q "^PermitRootLogin" /etc/ssh/sshd_config && sed -i 's/^PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config || echo "PermitRootLogin no" >> /etc/ssh/sshd_config

# Disable password-based authentication (force key-based auth)
sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
grep -q "^PasswordAuthentication" /etc/ssh/sshd_config && sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config || echo "PasswordAuthentication no" >> /etc/ssh/sshd_config

# Restart SSH to apply changes
systemctl restart sshd
echo "SSH has been secured. Root login and password authentication are disabled."
echo "WARNING: Ensure you have set up SSH keys for '$NEW_USER' before logging out!"

# --- Step 4: Configure Firewall (UFW) ---
print_header "Configuring UFW (Uncomplicated Firewall)"
# Install UFW if it's not already installed
apt-get install ufw -y

# Reset UFW to default settings
ufw --force reset

# Set default policies
ufw default deny incoming
ufw default allow outgoing

# Allow essential ports
ufw allow ssh     # Port 22 by default
ufw allow http    # Port 80
ufw allow https   # Port 443

# Enable the firewall
ufw --force enable
echo "Firewall configured and enabled."
ufw status verbose

# --- Step 5: Install Fail2ban ---
print_header "Installing Fail2ban for Brute-Force Protection"
apt-get install fail2ban -y

# Create a local jail configuration to override defaults
JAIL_LOCAL="/etc/fail2ban/jail.local"
if [ ! -f "$JAIL_LOCAL" ]; then
    echo "Creating Fail2ban local configuration..."
    cat > "$JAIL_LOCAL" << EOL
[DEFAULT]
bantime = 1h
findtime = 10m
maxretry = 5

[sshd]
enabled = true
EOL
fi

# Start and enable Fail2ban service
systemctl start fail2ban
systemctl enable fail2ban
echo "Fail2ban has been installed and configured."
systemctl status fail2ban --no-pager

# --- Final Message ---
print_header "Initial Server Hardening Complete!"
echo "Summary of actions taken:"
echo "✓ System packages updated."
echo "✓ New sudo user '$NEW_USER' created."
echo "✓ SSH root login and password authentication disabled."
echo "✓ UFW firewall enabled (allowing SSH, HTTP, HTTPS)."
echo "✓ Fail2ban installed to protect against SSH brute-force attacks."
echo ""
echo "IMPORTANT NEXT STEPS:"
echo "1. If you haven't already, set up SSH key authentication for the user '$NEW_USER'."
echo "2. Log out of your root session and log back in as '$NEW_USER'."
echo "   ssh ${NEW_USER}@[your_server_ip]"
echo "3. Regularly update your server with 'sudo apt update && sudo apt upgrade'."

exit 0
