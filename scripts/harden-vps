#!/bin/bash

# =================================================================
#           Ubuntu Server Initial Security Hardening Script
# =================================================================
#
# WHAT IT DOES:
# 1. Updates all system packages.
# 2. Prompts to create a new primary user with sudo privileges.
# 3. Creates a default 'deploy' user for application management.
# 4. Grants Docker access to both the primary and 'deploy' users.
# 5. Prompts to change the default SSH port.
# 6. Disables root SSH login and password authentication.
# 7. Configures UFW (Uncomplicated Firewall).
# 8. Installs and configures Fail2ban for brute-force protection.
#
# =================================================================

# --- Script Functions ---

print_header() {
	echo ""
	echo "============================================================"
	echo "  $1"
	echo "============================================================"
}

# --- Main Script ---

if [[ "${EUID}" -ne 0 ]]; then
	echo "Error: This script must be run as root."
	echo "Please run with 'sudo'."
	exit 1
fi

SSH_PORT=22

# --- Step 1: System Update ---
print_header "Updating System Packages"
echo "This will update the package lists and upgrade all installed packages."
apt-get update && apt-get upgrade -y
apt-get autoremove -y
apt-get autoclean -y
echo "System update complete."

# --- Step 2: Create a New Sudo User ---
print_header "Creating a New Sudo User"
read -p "Enter the username for the new primary sudo user: " NEW_USER
if [ -z "$NEW_USER" ]; then
	echo "No username entered. Aborting."
	exit 1
fi

if id "$NEW_USER" &>/dev/null; then
	echo "User '$NEW_USER' already exists. Skipping user creation."
else
	useradd -m -s /bin/bash "$NEW_USER"
	echo "User '$NEW_USER' created."
	echo "Please set a password for $NEW_USER."
	passwd "$NEW_USER"
	usermod -aG sudo "$NEW_USER"
	echo "âœ… User '$NEW_USER' has been granted sudo privileges."
fi

# --- Step 3: Create Deploy User & Configure Docker Access ---
print_header "Creating 'deploy' User & Configuring Docker Access"
DEPLOY_USER="deploy"

if id "$DEPLOY_USER" &>/dev/null; then
	echo "User '$DEPLOY_USER' already exists. Skipping creation."
else
	# Create the user with a home directory and shell, but no password for security
	useradd -m -s /bin/bash --disabled-password "$DEPLOY_USER"
	echo "âœ… Default user '$DEPLOY_USER' created for deployments."
	echo "   NOTE: This user has no password and requires SSH key authentication."
fi

# Create docker group if it doesn't exist and add users
if ! getent group docker >/dev/null; then
	echo "Docker group not found. Creating it now."
	groupadd docker
	echo "âœ… Docker group created."
fi

echo "Adding users '$NEW_USER' and '$DEPLOY_USER' to the docker group..."
usermod -aG docker "$NEW_USER"
usermod -aG docker "$DEPLOY_USER"
echo "âœ… Users have been granted Docker privileges."

# --- Step 4: Secure SSH ---
print_header "Securing SSH Configuration"
read -p "Enter a new SSH port (1-65535) or press Enter to keep default port 22: " NEW_SSH_PORT
if [[ ! -z "$NEW_SSH_PORT" ]]; then
	if ! [[ "$NEW_SSH_PORT" =~ ^[0-9]+$ ]] || ((NEW_SSH_PORT < 1 || NEW_SSH_PORT > 65535)); then
		echo "Invalid port number. Using default port 22."
	else
		SSH_PORT=$NEW_SSH_PORT
		echo "âœ… SSH port will be changed to $SSH_PORT."
	fi
fi

echo "Disabling root login and password authentication..."
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
grep -q -E "^#?Port" /etc/ssh/sshd_config && sed -i -E "s/^#?Port.*/Port ${SSH_PORT}/" /etc/ssh/sshd_config || echo "Port ${SSH_PORT}" >>/etc/ssh/sshd_config
grep -q "^PermitRootLogin" /etc/ssh/sshd_config && sed -i 's/^PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config || echo "PermitRootLogin no" >>/etc/ssh/sshd_config
grep -q "^PasswordAuthentication" /etc/ssh/sshd_config && sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config || echo "PasswordAuthentication no" >>/etc/ssh/sshd_config

# CORRECTED LINE: Changed 'sshd' to 'ssh'
systemctl restart ssh
echo "SSH has been secured."
echo "  - Port changed to: $SSH_PORT"
echo "  - Root login disabled."
echo "  - Password authentication disabled."

# --- Step 5: Configure Firewall (UFW) ---
print_header "Configuring UFW (Uncomplicated Firewall)"
apt-get install ufw -y
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
echo "Opening new SSH port $SSH_PORT in the firewall."
ufw allow ${SSH_PORT}/tcp
ufw allow http
ufw allow https
ufw --force enable
echo "Firewall configured and enabled."
ufw status verbose

# --- Step 6: Install Fail2ban ---
print_header "Installing Fail2ban for Brute-Force Protection"
apt-get install fail2ban -y
JAIL_LOCAL="/etc/fail2ban/jail.local"
if [ ! -f "$JAIL_LOCAL" ]; then
	echo "Creating Fail2ban local configuration..."
	cat >"$JAIL_LOCAL" <<EOL
[DEFAULT]
bantime = 1h
findtime = 10m
maxretry = 5

[sshd]
enabled = true
port = ${SSH_PORT}
EOL
fi

systemctl restart fail2ban
systemctl enable fail2ban
echo "Fail2ban has been installed and configured to monitor SSH on port ${SSH_PORT}."

# --- Final Message ---
print_header "Initial Server Hardening Complete! ðŸŽ‰"
echo "Summary of actions taken:"
echo "âœ“ System packages updated."
echo "âœ“ Primary sudo user '$NEW_USER' created."
echo "âœ“ Default 'deploy' user created for application deployments."
echo "âœ“ Users '$NEW_USER' and 'deploy' granted Docker access."
echo "âœ“ SSH port changed to ${SSH_PORT}."
echo "âœ“ SSH root login and password authentication disabled."
echo "âœ“ UFW firewall enabled (allowing SSH on port ${SSH_PORT}, HTTP, HTTPS)."
echo "âœ“ Fail2ban installed to protect against SSH brute-force attacks."
echo ""
echo "IMPORTANT NEXT STEPS:"
echo "1. Set up SSH key authentication for '$NEW_USER' and 'deploy'."
echo "2. Log out and log back in as '$NEW_USER' using the new port:"
echo "   ssh -p ${SSH_PORT} ${NEW_USER}@[your_server_ip]"
echo "3. Remember to run 'sudo apt update && sudo apt upgrade' regularly."
exit 0
